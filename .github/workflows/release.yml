name: Docker image release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-test"

env:
  REGISTRY_IMAGE: holisticon/bpm-ai-connectors-camunda-8

jobs:
  build-jvm:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./feel-engine-wrapper
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Get GPG private key into GPG
      - name: Import GPG Owner Trust
        run: echo ${{ secrets.GPG_OWNERTRUST }} | base64 --decode | gpg --import-ownertrust

      - name: Import GPG key
        run: echo ${{ secrets.GPG_SECRET_KEYS }} | base64 --decode | gpg --import --no-tty --batch --yes

      # Setup JDK and Maven
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'

      - name: Prepare Maven Wrapper
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw package -Dnative

  build-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bpm-ai-connectors-c8
    steps:
      - uses: actions/checkout@v3
      -
        name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      -
        name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.6.1"
      -
        name: Install dependencies
        run: poetry install --only main
      -
        name: Build
        run: poetry build

  build-push-amd64:
    needs: [build-jvm, build-python]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        run: docker context create builders
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          build-args: |
            TARGETARCH=amd64
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.tag }}-amd64
            ${{ env.REGISTRY_IMAGE }}:latest-amd64

  build-push-arm64:
    needs: [build-jvm, build-python]
    runs-on: macos-14
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Setup docker (missing on MacOS)
        if: runner.os == 'macos'
        run: |
          brew install docker
          colima start
          # For testcontainers to find the Colima socket
          # https://github.com/abiosoft/colima/blob/main/docs/FAQ.md#cannot-connect-to-the-docker-daemon-at-unixvarrundockersock-is-the-docker-daemon-running
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock      
      -
        run: docker context create builders
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/arm64
          build-args: |
            TARGETARCH=arm64
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.tag }}-arm64
            ${{ env.REGISTRY_IMAGE }}:latest-arm64

  pytest-docker:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bpm-ai-connectors-c8/tests
    needs: [build-push-amd64]
    steps:
      - uses: actions/checkout@v4
      -
        name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      -
        name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.6.1"
      -
        name: Install dependencies
        run: poetry install --only test --no-root --no-cache
      -
        name: Run pytest
        run: ZEEBE_TEST_IMAGE_TAG=8.4.0 OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} TEST_RUNTIME=docker poetry run pytest

  create-push-manifest:
    runs-on: ubuntu-latest
    needs: [build-push-amd64, build-push-arm64, pytest-docker]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})
      -
        name: Create version manifest and push
        run: |
          docker manifest create \
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.tag }} \
            --amend ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.tag }}-amd64 \
            --amend ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.tag }}-arm64
          docker manifest push ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.tag }}
      -
        name: Create latest manifest and push
        run: |
          docker manifest create \
            ${{ env.REGISTRY_IMAGE }}:latest \
            --amend ${{ env.REGISTRY_IMAGE }}:latest-amd64 \
            --amend ${{ env.REGISTRY_IMAGE }}:latest-arm64
          docker manifest push ${{ env.REGISTRY_IMAGE }}:latest
